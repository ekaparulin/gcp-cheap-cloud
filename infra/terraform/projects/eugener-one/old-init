# apt-get update && apt-get upgrade
# apt-get install -y jq haproxy snapd wget 

# EXTERNAL_IP=$(curl -H "Metadata-Flavor: Google" http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip)
# gcloud dns record-sets update ha.eugener.one \
#     --rrdatas=$EXTERNAL_IP \
#     --ttl=30 \
#     --type=A \
#     --zone=eugener-one

# systemctl stop haproxy

# # Duck DNS
# DUCK_DNS_SECRET=$(gcloud secrets versions access latest --secret="duck_dns")
# DUCK_DNS_DOMAIN=$(echo $DUCK_DNS_SECRET | jq -r .domain)
# DUCK_DNS_TOKEN=$(echo $DUCK_DNS_SECRET | jq -r .token)

# curl "https://www.duckdns.org/update?domains=$DUCK_DNS_DOMAIN,ha-$DUCK_DNS_DOMAIN&token=$DUCK_DNS_TOKEN"

# # peervpn
# gcloud secrets versions access latest --secret="peervpn" > /etc/peervpn.conf
# gsutil cp gs://${data.google_project.project.project_id}-binaries/peervpn/$(uname -m)/peervpn /usr/bin
# chmod 755  /usr/bin/peervpn

# gsutil cp gs://${data.google_project.project.project_id}-binaries/peervpn/systemd/peervpn.service /etc/systemd/system
# systemctl enable peervpn
# systemctl start peervpn

# # Certbot
# snap install core
# snap refresh core
# snap install --classic certbot
# ln -s /snap/bin/certbot /usr/bin/certbot

# CERTBOT_SECRET=$(gcloud secrets versions access latest --secret="certbot")
# CERTBOT_EMAIL=$(echo $CERTBOT_SECRET | jq -r .email)


# # Refresh cert
# certbot certonly --standalone -d ha-$DUCK_DNS_DOMAIN.duckdns.org --staple-ocsp -m $CERTBOT_EMAIL --agree-tos  --keep-until-expiring
# certbot certonly --standalone -d $DUCK_DNS_DOMAIN.duckdns.org --staple-ocsp -m $CERTBOT_EMAIL --agree-tos  --keep-until-expiring

# # Make PEM for Haproxy

# cat /etc/letsencrypt/live/$DUCK_DNS_DOMAIN.duckdns.org/fullchain.pem \
#     /etc/letsencrypt/live/$DUCK_DNS_DOMAIN.duckdns.org/privkey.pem \
#     > /etc/ssl/private/default.pem

# cat /etc/letsencrypt/live/ha-$DUCK_DNS_DOMAIN.duckdns.org/fullchain.pem \
#     /etc/letsencrypt/live/ha-$DUCK_DNS_DOMAIN.duckdns.org/privkey.pem \
#     > /etc/ssl/private/ha.pem

# # Haproxy
# cp /dev/null /etc/haproxy/haproxy.cfg
# gcloud secrets versions access latest --secret="haproxy" > /etc/haproxy/haproxy.cfg
# systemctl start haproxy


# # Install OpsAgent
# cd /tmp
# curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
# bash ./add-google-cloud-ops-agent-repo.sh --also-install


# # Download and start k3s
# # wget -O /usr/bin/k3s https://github.com/k3s-io/k3s/releases/download/v1.25.2%2Bk3s1/k3s
# # chmod 755 /usr/bin/k3s


# # K3S_SECRET=$(gcloud secrets versions access latest --secret="k3s")
# # K3S_TOKEN=$(echo $K3S_SECRET | jq -r .token)
# # k3s agent --server https://10.9.77.2:6443 --token $K3S_TOKEN &


# apt-get install -y wireguard linux-headers-$(uname -r)

# WG_PRIVATE_KEY=$(gcloud secrets versions access latest --secret="wireguard")

# cat << EOF > /etc/wireguard/wg0.conf

# # define the WireGuard service
# [Interface]

# # contents of file wg-private.key that was recently created
# PrivateKey = $WG_PRIVATE_KEY

# # UDP service port; 51820 is a common choice for WireGuard
# ListenPort = 51820

# EOF

# cat << EOF > /etc/network/interfaces.d/wg0
# # indicate that wg0 should be created when the system boots, and on ifup -a
# auto wg0

# # describe wg0 as an IPv4 interface with static address
# iface wg0 inet static

#         # static IP address 
#         address 10.4.25.1/24

#         # before ifup, create the device with this ip link command
#         pre-up ip link add wg0 type wireguard

#         # before ifup, set the WireGuard config from earlier
#         pre-up wg setconf wg0 /etc/wireguard/wg0.conf

#         # after ifdown, destroy the wg0 interface
#         post-down ip link del wg0
# EOF


# ifup wg0

# sysctl -w net.ipv4.ip_forward=1
# iptables -A FORWARD -i wg0 -j ACCEPT; 
# iptables -t nat -A POSTROUTING -o ens4 -j MASQUERADE
